// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Npmlog = require("npmlog");
var Process = require("process");
var Arangojs = require("arangojs");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

function makeClient(db, user, pass) {
  return new Arangojs.Database().useBasicAuth(user, pass).useDatabase(db);
}

function createDatabase(client, db) {
  return client.createDatabase(db).then((function (result) {
                  return Promise.resolve((Npmlog.info("Database_Arango", "Created database:", result), /* () */0));
                })).catch((function (error) {
                Npmlog.error("Database_Arango", "Exiting due to error creating database:", error);
                return Promise.resolve((Process.exit(1), /* () */0));
              }));
}

function ensureDatabase(client, name) {
  return client.exists().then((function (exists) {
                if (exists) {
                  Npmlog.info("Database_Arango", "Database exists:", name);
                  return Promise.resolve(/* () */0);
                } else {
                  Npmlog.info("Database_Arango", "Attempting to create database:", name);
                  return createDatabase(client, name);
                }
              }));
}

function createCollection(collection) {
  return collection.create().then((function (result) {
                  Npmlog.info("Database_Arango", "Created collection:", result);
                  return Promise.resolve(collection);
                })).catch((function (error) {
                Npmlog.error("Database_Arango", "Exiting due to error creating collection:", error);
                Process.exit(1);
                return Promise.resolve(collection);
              }));
}

function ensureCollection(client, collectionName) {
  var collection = client.collection(collectionName);
  return collection.exists().then((function (exists) {
                if (exists) {
                  Npmlog.info("Database_Arango", "Collection exists:", collectionName);
                  return Promise.resolve(client);
                } else {
                  Npmlog.info("Database_Arango", "Attempting to create collection:", collectionName);
                  return createCollection(collection).then((function () {
                                return Promise.resolve(client);
                              }));
                }
              }));
}

function setup(client, dbName) {
  return ensureDatabase(client, dbName).then((function () {
                return Promise.resolve((ensureCollection(client, "blocks"), /* () */0));
              }));
}

function largestBlockNum(client) {
  return client.query("\nFOR block IN blocks\nSORT block.block_num DESC\nLIMIT 1\nRETURN block.block_num\n").then((function (prim) {
                  return prim.next();
                })).then((function (json) {
                return Promise.resolve(Belt_Option.getWithDefault(Belt_Option.getWithDefault(Belt_Option.map((json == null) ? undefined : Js_primitive.some(json), (function (param) {
                                          return Json_decode.optional(Json_decode.$$int, param);
                                        })), undefined), 0));
              }));
}

function saveBlock(client, json) {
  ((json._key = json.block_num + ""));
  var saveOpts = {
    overwrite: true
  };
  return client.collection("blocks").save(json, saveOpts);
}

function count(client) {
  return client.query("RETURN LENGTH(blocks)").then((function (prim) {
                  return prim.next();
                })).then((function (json) {
                return Promise.resolve(Belt_Option.getWithDefault(Belt_Option.map((json == null) ? undefined : Js_primitive.some(json), Json_decode.$$int), 0));
              }));
}

function findMissing(client, push, lastBlockNum, $staropt$star, _) {
  var limit = $staropt$star !== undefined ? $staropt$star : 1000;
  var vars = Json_encode.object_(/* :: */[
        /* tuple */[
          "lastBlockNum",
          lastBlockNum
        ],
        /* :: */[
          /* tuple */[
            "limit",
            limit
          ],
          /* [] */0
        ]
      ]);
  return client.query("FOR b IN blocks\n  FILTER @lastBlockNum < b.block_num\n  SORT b.block_num ASC\n  LIMIT @limit\n  RETURN b.block_num", vars).then((function (prim) {
                  return prim.all();
                })).then((function (blockNums) {
                if (blockNums.length !== 0) {
                  return Belt_Array.reduce(blockNums, Promise.resolve(lastBlockNum), (function (promise, json) {
                                  return promise.then((function (lastBlockNum) {
                                                var blockNum = Json_decode.$$int(json);
                                                var diff = blockNum - lastBlockNum | 0;
                                                if (diff > 1) {
                                                  var i = 1;
                                                  var missing = /* array */[];
                                                  while(i < diff) {
                                                    missing.push(lastBlockNum + i | 0);
                                                    i = i + 1 | 0;
                                                  };
                                                  var numMissing = missing.length;
                                                  Npmlog.info("Database_Arango", "Found " + (String(numMissing) + " missing block(s). First three:"), Belt_Array.slice(missing, 0, 3));
                                                  return Curry._1(push, missing).then((function () {
                                                                return Promise.resolve(blockNum);
                                                              }));
                                                } else {
                                                  return Promise.resolve(blockNum);
                                                }
                                              }));
                                })).then((function (lastBlockNum) {
                                return findMissing(client, push, lastBlockNum, undefined, /* () */0);
                              }));
                } else {
                  return Promise.resolve(/* () */0);
                }
              }));
}

function Make(Info) {
  return (function (Q) {
      var client = makeClient(Info[/* db */0], Info[/* user */1], Info[/* pass */2]);
      var setup$1 = function () {
        return setup(client, Info[/* db */0]);
      };
      var count$1 = function () {
        return count(client);
      };
      var save = function (param) {
        return saveBlock(client, param);
      };
      var largestBlockNum$1 = function () {
        return largestBlockNum(client);
      };
      var findMissing$1 = function () {
        return findMissing(client, Q[/* push */1], 0, undefined, /* () */0).then((function () {
                      Npmlog.info("Database_Arango", "Done finding missing blocks.", "");
                      return Promise.resolve(/* () */0);
                    }));
      };
      return /* module */[
              /* setup */setup$1,
              /* count */count$1,
              /* save */save,
              /* largestBlockNum */largestBlockNum$1,
              /* findMissing */findMissing$1
            ];
    });
}

exports.makeClient = makeClient;
exports.createDatabase = createDatabase;
exports.ensureDatabase = ensureDatabase;
exports.createCollection = createCollection;
exports.ensureCollection = ensureCollection;
exports.setup = setup;
exports.largestBlockNum = largestBlockNum;
exports.saveBlock = saveBlock;
exports.count = count;
exports.findMissing = findMissing;
exports.Make = Make;
/* npmlog Not a pure module */
