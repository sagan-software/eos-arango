// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Elasticsearch = require("elasticsearch");

var Options = /* module */[];

function make(host, hosts, httpAuth, log, requestTimeout, deadTimeout, pingTimeout, maxSockets, keepAlive, keepAliveInterval, keepAliveMaxFreeSockets, keepAliveFreeSocketTimeout, suggestCompression, connectionClass, _) {
  var tmp = { };
  if (host) {
    tmp.host = Js_primitive.valFromOption(host);
  }
  if (hosts) {
    tmp.hosts = Js_primitive.valFromOption(hosts);
  }
  if (httpAuth) {
    tmp.httpAuth = Js_primitive.valFromOption(httpAuth);
  }
  if (log) {
    tmp.log = Js_primitive.valFromOption(log);
  }
  if (requestTimeout) {
    tmp.requestTimeout = Js_primitive.valFromOption(requestTimeout);
  }
  if (deadTimeout) {
    tmp.deadTimeout = Js_primitive.valFromOption(deadTimeout);
  }
  if (pingTimeout) {
    tmp.pingTimeout = Js_primitive.valFromOption(pingTimeout);
  }
  if (maxSockets) {
    tmp.maxSockets = Js_primitive.valFromOption(maxSockets);
  }
  if (keepAlive) {
    tmp.keepAlive = Js_primitive.valFromOption(keepAlive);
  }
  if (keepAliveInterval) {
    tmp.keepAliveInterval = Js_primitive.valFromOption(keepAliveInterval);
  }
  if (keepAliveMaxFreeSockets) {
    tmp.keepAliveMaxFreeSockets = Js_primitive.valFromOption(keepAliveMaxFreeSockets);
  }
  if (keepAliveFreeSocketTimeout) {
    tmp.keepAliveFreeSocketTimeout = Js_primitive.valFromOption(keepAliveFreeSocketTimeout);
  }
  if (suggestCompression) {
    tmp.suggestCompression = Js_primitive.valFromOption(suggestCompression);
  }
  if (connectionClass) {
    tmp.connectionClass = Js_primitive.valFromOption(connectionClass);
  }
  return new Elasticsearch.Client(tmp);
}

var Indices = /* module */[];

exports.Options = Options;
exports.make = make;
exports.Indices = Indices;
/* elasticsearch Not a pure module */
